//Главный модуль программы параллельного вычисления интеграла синуса
//методом прямоугольников.

//Распростаняется под лиценизией BSD
//Автор: Белявцев И.П.
//Version 0.1 (serial)


#include <stdio.h>
#include <math.h>
#include <time.h>
#include <omp.h>
#define CLOCK_REALTIME 0

int main (int argc, char* argv[])
{


	//Очищаем экран
	printf ("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");

	//Приветственный экран
	printf ("SinParallelIntegrator - программа для вычисления определенного\n");
	printf ("интеграла функции f(x) = sin(x).\n");
	printf ("++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n");
	printf ("Вычисления производятся по формуле Ньютона-Лейбница (аналитическое\n");
	printf ("значение) и методом прямоугольников (численное значение).\n");
	printf ("Пользователю необходимо указать границы интегрирования количество\n");
	printf ("отрезков разбиения.\n");
	printf ("После выполнения выводится аналитическое и численное значения, а \n");
	printf ("также время расчета численного значения.\n");
	printf ("++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n");
	printf ("Программа распростаняется под лиценизией BSD\n");
	printf ("Автор: Белявцев И.П.\n");
	printf ("Version 0.1 (serial)\n");
	printf ("++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n");
	
	//Объявляем границы интервала интегрирования
	double a, b;

	//Читаем границы у пользователя с клавиатуры
	printf ("Введите нижнюю границу интегрирования:");
	scanf ("%lf",&a);
	printf ("Введите верхнюю границу интегрирования:");
	scanf ("%lf",&b);

	//Согласно формулы Ньютона-Лейбница определенный интеграл
	//на интервале [a,b] равен разности первообразной в точке
	//b и в точке a
	//Для функции sin(x) первообразная -cos(x)
	//Исходя из этого вычислим определенный интеграл
	double analitic;
	analitic = -cos(b)+cos(a);

	//Выводим полученное аналитическое значение
	printf ("Аналитическое значение:%10.9lf\n",analitic);
 
	//Объявляем переменную количества отрезков разбиения
	unsigned long n;
	//Читаем количество отрезков с клавиатуры  у пользователя
	printf ("Введите количество отрезков разбиения:");
	scanf ("%lu",&n);
	printf ("Выполняется расчет...\n");
	
	//Начинаем отсчет времени выполнения
	struct timespec tStart; 
	clock_gettime(CLOCK_REALTIME, &tStart); 
	//Находим ширину отрезка
	double delta = (b-a)/n;
	//Объявляем накопитель
	double numerical = 0.0;
	//Объявляем итераторы по оси x
	double x;
	unsigned long i;
	#pragma omp parallel for reduction(+:numerical) private(x) shared (i)
	//Суммируем значения высот прямоугольников
	for (i = 0; i<n;i++)
	{
		x = a+delta*(double)i;
		numerical += sin(x);
	}
	//Умножаем на ширину отрезков
	numerical *= delta;
	//Останавливаем отсчет времени выполнения
	struct timespec *tStop = new timespec(); 
	clock_gettime(CLOCK_REALTIME, &tStop); 
	//Выводим полученное численное значение
	printf ("Численное значение:%10.9lf\n",numerical);

	//Выводим время работы программы
	printf("Численный расчет выполнен за %.3f сек\n", (float)(tStop.tv_sec - tStart.tv_sec));

	
	//Корректное завершение программы
	return 0;
}

